import {
  Box,
  Button,
  Flex,
  IconButton,
  Text,
  Textarea,
  Image,
  Icon,
  Input,
  Card,
  CardHeader,
  CardBody,
  Avatar,
  For,
  Stack,
} from "@chakra-ui/react";
import {
  MenuContent,
  MenuItem as ChakraMenuItem,
  MenuRoot,
  MenuTrigger,
} from "@/components/ui/menu";
import { createFileRoute } from "@tanstack/react-router";
import { useState, useEffect, useRef } from "react";
import {
  FiMessageSquare,
  FiMoreHorizontal,
  FiPlus,
  FiSend,
  FiTrash,
  FiCopy,
  FiEdit,
} from "react-icons/fi";
import CloudxScopeLogo from "/assets/images/CloudxScope-logo1.svg";
import { PushpinOutlined } from "@ant-design/icons";
import ReactMarkdown from "react-markdown";
import { DateFormat, formatTimestamp } from "../../utils/date-utils";
import AddExpertCard from "@/components/aichat/AddExpertCard";
import { Expert, UsersExpert, ChatMessage, ChatConversation } from "@/components/aichat/aichatentry";

// default Experts list
const defaultExperts: Expert[] = [
  { id: "1", name: "General Assistant" },
  { id: "2", name: "Clould Resoure Expert" },
  { id: "3", name: "Clould Security Anlysis" },
];

// Helper function to deserialize conversations from localStorage
const deserializeConversations = (data: string): ChatConversation[] => {
  const parsed = JSON.parse(data);
  return parsed.map((conv: any) => ({
    ...conv,
    createdAt: new Date(conv.createdAt),
    messages: conv.messages.map((msg: any) => ({
      ...msg,
      timestamp: new Date(msg.timestamp),
    })),
  }));
};

export const Route = createFileRoute("/_layout/aichat")({
  component: AiChat,
});

function AiChat() {
  // ================== state ============================
  const [conversations, setConversations] = useState<ChatConversation[]>(() => {
    const saved = localStorage.getItem("aiChatConversations");
    return saved ? deserializeConversations(saved) : [];
  });

  const [currentConversation, setCurrentConversation] =
    useState<ChatConversation | null>(null);

  const [newMessage, setNewMessage] = useState("");

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const [experts, setExperts] = useState<Expert[]>(() => {
    const saved = localStorage.getItem("aiChatExperts");
    return saved ? JSON.parse(saved) : defaultExperts;
  });

  // 控制右侧面板是否显示添加专家卡片
  const [showAddExpert, setShowAddExpert] = useState(false);

  // ========== effect ===================================
  useEffect(() => {
    localStorage.setItem("aiChatConversations", JSON.stringify(conversations));
  }, [conversations]);

  useEffect(() => {
    localStorage.setItem("aiChatExperts", JSON.stringify(experts));
  }, [experts]);

  useEffect(() => {
    scrollToBottom();
  }, [currentConversation]);

  const scrollToBottom = () => {
    // messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // ========== action ===================================
  const handleNewConversation = () => {
    const newConversation: ChatConversation = {
      id: Date.now().toString(),
      title: `Chat ${conversations.length + 1}`,
      messages: [],
      createdAt: new Date(),
    };

    setConversations((prev) => [newConversation, ...prev]);
    setCurrentConversation(newConversation);
    setNewMessage("");
    // 创建新对话时，关闭添加专家界面，返回对话模块
    setShowAddExpert(false);
  };

  const handleSelectConversation = (conversation: ChatConversation) => {
    setCurrentConversation(conversation);
    setNewMessage("");
    // 点击聊天历史时，关闭添加专家界面，返回对话模块
    setShowAddExpert(false);
  };

  const handleSendMessage = () => {
    if (!newMessage.trim() || !currentConversation) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: "user",
      content: newMessage,
      timestamp: new Date(),
      expert: defaultExperts[0],
    };

    const updatedConversation = {
      ...currentConversation,
      messages: [...currentConversation.messages, userMessage],
    };

    const updatedConversations = conversations.map((conv) =>
      conv.id === currentConversation.id ? updatedConversation : conv
    );

    setConversations(updatedConversations);
    setCurrentConversation(updatedConversation);
    setNewMessage("");

    setTimeout(() => {
      const aiMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: `This is a simulated response to your message: "${newMessage}". In a real application, this would be generated by an AI model.`,
        timestamp: new Date(),
        expert: defaultExperts[1],
      };

      const finalConversation = {
        ...updatedConversation,
        messages: [...updatedConversation.messages, aiMessage],
      };

      const finalConversations = updatedConversations.map((conv) =>
        conv.id === currentConversation.id ? finalConversation : conv
      );

      setConversations(finalConversations);
      setCurrentConversation(finalConversation);
    }, 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleDeleteExpert = (id: string) => {
    setExperts(experts.filter((expert) => expert.id !== id));
  };

  const handleDeleteConversation = (id: string) => {
    const updatedConversations = conversations.filter((conv) => conv.id !== id);
    setConversations(updatedConversations);

    if (currentConversation?.id === id) {
      setCurrentConversation(null);
    }
  };

  const handlePinConversation = (id: string) => {
    const now = new Date().toISOString();

    const updatedConversations = conversations.map((conv) => {
      if (conv.id === id) {
        if (conv.isPinned) {
          return {
            ...conv,
            isPinned: false,
            createdAt: conv.oldTimestamp
              ? new Date(conv.oldTimestamp)
              : conv.createdAt,
            oldTimestamp: undefined,
          };
        } else {
          return {
            ...conv,
            isPinned: true,
            oldTimestamp: conv.createdAt.toISOString(),
            createdAt: new Date(now),
          };
        }
      }
      return conv;
    });

    const sortedConversations = [...updatedConversations].sort((a, b) => {
      if (a.isPinned && !b.isPinned) return -1;
      if (!a.isPinned && b.isPinned) return 1;
      return (
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
    });

    setConversations(sortedConversations);

    if (currentConversation?.id === id) {
      setCurrentConversation(
        sortedConversations.find((conv) => conv.id === id) || null
      );
    }
  };

  // 新功能：点击Add Expert触发
  const handleAddExpert = (expert: Expert) => {
    setExperts((prev) => [...prev, expert]);
  };

  // ========= render 内容区 =============================

  const renderChatContent = () => (
    <Flex
      h="full"
      w="full"
      p={4}
      overflowY="auto"
      bg="white"
      direction={"column"}
      position={"relative"}
    >
      {currentConversation?.messages.map((message, _index) => {
        const isUser = message.role === "user";
        return (
          <Flex
            key={message.id}
            w="50%"
            maxW="80%"
            mb={4}
            alignSelf={isUser ? "flex-end" : "flex-start"}
            direction={"column"}
          >
            {/* Message content*/}
            <Flex
              bg={isUser ? "blue.500" : "gray.100"}
              color={isUser ? "white" : "black"}
              borderRadius="lg"
              p={3}
            >
              {message.role === "user" ? (
                <Text whiteSpace="pre-wrap">{message.content}</Text>
              ) : (
                <ReactMarkdown>{message.content}</ReactMarkdown>
              )}
            </Flex>
            {/* Message actions bar */}
            <Flex justifyContent="flex-end" alignItems="center" gap={1} p={1}>
              <IconButton
                aria-label="Copy"
                variant="ghost"
                size="xs"
                minW="auto"
                h="auto"
                onClick={() => console.log("Copy!")}
              >
                <Icon as={FiCopy} boxSize={3} />
              </IconButton>
              <IconButton
                aria-label="Edit"
                variant="ghost"
                size="xs"
                minW="auto"
                h="auto"
                onClick={() => console.log("Edit!")}
              >
                <Icon as={FiEdit} boxSize={3} />
              </IconButton>
              <Text fontSize="xs">
                {formatTimestamp(message.timestamp, DateFormat.SIMPLE)}
              </Text>
            </Flex>
          </Flex>
        );
      })}
      <div ref={messagesEndRef} />
    </Flex>
  );

  const renderEmptyState = () => (
    <Flex
      direction={"column"}
      p={8}
      alignItems="center"
      justifyContent="center"
      align={"center"}
    >
      <Image
        src={CloudxScopeLogo}
        alt="Logo"
        maxW="4xs"
        p={2}
        w="200px"
        h="200px"
      />
      <Text fontSize="xl" mt={4} fontWeight="bold">
        Welcome to Cloudx Scope Smart Platform
      </Text>
      <Box
        maxWidth="500px"
        mx="auto"
        textAlign="left"
        bg="gray.50"
        p={4}
        borderRadius="md"
      >
        <Text fontWeight="semibold" mb={2}>
          💡 Tips for better results:
        </Text>
        <Text fontSize="sm" mb={1}>
          • Be specific with your questions
        </Text>
        <Text fontSize="sm" mb={1}>
          • Ask follow-up questions to dive deeper
        </Text>
        <Text fontSize="sm" mb={1}>
          • Try asking for examples or explanations
        </Text>
        <Text fontSize="sm">• Experiment with different phrasings</Text>
      </Box>
    </Flex>
  );

  // ================= render 主体 ========================
  return (
    <Flex
      h="full"
      w="full"
      m="0"
      borderRadius={{ base: "none", md: "lg" }}
      overflow="hidden"
      boxShadow={{ base: "none", md: "sm" }}
    >
      {/* 左侧栏 */}
      <Flex
        w="20%"
        h="full"
        bg="gray.50"
        p={4}
        borderRight="1px solid"
        borderColor="gray.200"
        direction="column"
      >
        {/* AI Chat Icon */}
        <Flex alignItems="center" justifyContent="center" mb={6} mt={2}>
          <FiMessageSquare size={24} />
          <Text ml={2} fontWeight="bold">
            AI Chat
          </Text>
        </Flex>

        {/* New Chat Button */}
        <Button colorScheme="blue" mb={6} onClick={handleNewConversation}>
          <Flex alignItems="center">
            <FiPlus style={{ marginRight: 8 }} />
            New Chat
          </Flex>
        </Button>

        {/* Experts List 标题+新增按钮 */}
        <Flex justify="space-between" align="center" mb={2}>
          <Text fontWeight="bold">Experts</Text>
          <IconButton
            variant="ghost"
            color="blue.500"
            size="xs"
            aria-label="Add expert"
            onClick={() => setShowAddExpert(true)}
          >
            <FiPlus />
          </IconButton>
        </Flex>
        {/* Experts List */}
        <Box mb={6}>
          {experts.map((expert) => (
            <Flex
              key={expert.id}
              p={1.5}
              _hover={{ bg: "gray.100" }}
              borderRadius="md"
              cursor="pointer"
              onClick={handleNewConversation}
              justify="space-between"
              align="center"
            >
              <Text fontSize="sm">{expert.name}</Text>
              <MenuRoot>
                <MenuTrigger asChild>
                  <IconButton
                    variant="ghost"
                    color="inherit"
                    size="xs"
                    onClick={(e: React.MouseEvent) => e.stopPropagation()}
                    aria-label="More options"
                  >
                    <FiMoreHorizontal size={16} />
                  </IconButton>
                </MenuTrigger>
                <MenuContent>
                  <ChakraMenuItem
                    value="delete"
                    onClick={(e: React.MouseEvent) => {
                      e.stopPropagation();
                      handleDeleteExpert(expert.id);
                    }}
                    color="red.500"
                  >
                    <Flex align="center">
                      <FiTrash
                        style={{ marginRight: "0.5rem" }}
                        size={14}
                      />
                      Delete
                    </Flex>
                  </ChakraMenuItem>
                </MenuContent>
              </MenuRoot>
            </Flex>
          ))}
        </Box>

        {/* Chat History */}
        <Box flex={1} overflowY="auto">
          <Text fontWeight="bold" mb={2}>
            Chat History
          </Text>
          {conversations.map((conversation) => (
            <Flex
              key={conversation.id}
              p={1.5}
              _hover={{ bg: "gray.100" }}
              borderRadius="md"
              cursor="pointer"
              onClick={() => handleSelectConversation(conversation)}
              bg={
                currentConversation?.id === conversation.id
                  ? "blue.50"
                  : "transparent"
              }
              justify="space-between"
              align="center"
            >
              <Flex align="center">
                {conversation.isPinned && (
                  <PushpinOutlined
                    style={{
                      marginRight: "0.5rem",
                      transform: "rotate(45deg)",
                    }}
                    size={14}
                    color="gray"
                  />
                )}
                <Text fontSize="sm">
                  {conversation.title}
                </Text>
              </Flex>
              <MenuRoot closeOnSelect>
                <MenuTrigger asChild>
                  <IconButton
                    variant="ghost"
                    color="inherit"
                    size="xs"
                    onClick={(e: React.MouseEvent) => e.stopPropagation()}
                    aria-label="More options"
                  >
                    <FiMoreHorizontal size={16} />
                  </IconButton>
                </MenuTrigger>
                <MenuContent>
                  <ChakraMenuItem
                    value="pin"
                    onClick={(e: React.MouseEvent) => {
                      e.stopPropagation();
                      handlePinConversation(conversation.id);
                    }}
                  >
                    <Flex align="center">
                      <PushpinOutlined
                        style={{ marginRight: "0.5rem" }}
                        size={14}
                      />
                      {conversation.isPinned ? "Unpin" : "Pin"}
                    </Flex>
                  </ChakraMenuItem>
                  <ChakraMenuItem
                    value="delete"
                    onClick={(e: React.MouseEvent) => {
                      e.stopPropagation();
                      handleDeleteConversation(conversation.id);
                    }}
                    color="red.500"
                  >
                    <Flex align="center">
                      <FiTrash style={{ marginRight: "0.5rem" }} size={14} />
                      Delete
                    </Flex>
                  </ChakraMenuItem>
                </MenuContent>
              </MenuRoot>
            </Flex>
          ))}
        </Box>
      </Flex>
      {/* 右侧区域，根据showAddExpert判断内容 */}
      <Flex w="80%" h="full" direction="column" overflow="hidden">
        {showAddExpert ? (
          <AddExpertCard
            onBack={() => setShowAddExpert(false)}
            onSave={handleAddExpert}
            existingExperts={experts}
          />
        ) : (
          <>
            {/* messages area - 85% height */}
            <Flex
              w="full"
              h="85%"
              alignItems="center"
              justifyContent="center"
              bg="white"
              overflow="hidden"
            >
              {currentConversation && currentConversation.messages.length > 0
                ? renderChatContent()
                : renderEmptyState()}
            </Flex>
            {/* input area - 15% height */}
            <Flex
              w="full"
              h="15%"
              alignItems="center"
              justifyContent="center"
              bg="white"
              overflow="hidden"
            >
              <Flex w="90%" h="full" p="4" justifyContent="bottom">
                <Textarea
                  w="95%"
                  h="full"
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder="Type your message here..."
                  minHeight="80px"
                  maxHeight="150px"
                  resize="none"
                />
                <IconButton
                  w="5%"
                  aria-label="Send message"
                  colorScheme="blue"
                  ml={2}
                  onClick={handleSendMessage}
                  disabled={!newMessage.trim()}
                >
                  <FiSend />
                </IconButton>
              </Flex>
            </Flex>
          </>
        )}
      </Flex>
    </Flex>
  );
}

export default AiChat;