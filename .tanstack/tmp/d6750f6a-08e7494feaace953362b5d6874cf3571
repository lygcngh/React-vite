import { Box, Button, Flex, IconButton, Text, Textarea } from "@chakra-ui/react";
import { createFileRoute } from "@tanstack/react-router";
import { useState, useEffect, useRef } from "react";
import { FiMessageSquare, FiPlus, FiSend, FiUser } from "react-icons/fi";

// Define types for our chat data
interface ChatMessage {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}

interface ChatConversation {
  id: string;
  title: string;
  messages: ChatMessage[];
  createdAt: Date;
}

export const Route = createFileRoute("/_layout/ai-chat/aichat")({
  component: AiChat,
});

function AiChat() {
  // State for chat conversations
  const [conversations, setConversations] = useState<ChatConversation[]>(() => {
    const saved = localStorage.getItem("aiChatConversations");
    return saved ? JSON.parse(saved) : [];
  });
  
  // State for current conversation
  const [currentConversation, setCurrentConversation] = useState<ChatConversation | null>(null);
  
  // State for new message input
  const [newMessage, setNewMessage] = useState("");
  
  // Reference for auto-scrolling to bottom of chat
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Save conversations to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("aiChatConversations", JSON.stringify(conversations));
  }, [conversations]);

  // Scroll to bottom of messages when new messages are added
  useEffect(() => {
    scrollToBottom();
  }, [currentConversation]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // Create a new conversation
  const handleNewConversation = () => {
    const newConversation: ChatConversation = {
      id: Date.now().toString(),
      title: `Chat ${conversations.length + 1}`,
      messages: [],
      createdAt: new Date(),
    };
    
    setConversations(prev => [newConversation, ...prev]);
    setCurrentConversation(newConversation);
    setNewMessage("");
  };

  // Select an existing conversation
  const handleSelectConversation = (conversation: ChatConversation) => {
    setCurrentConversation(conversation);
    setNewMessage("");
  };

  // Handle sending a new message
  const handleSendMessage = () => {
    if (!newMessage.trim() || !currentConversation) return;

    // Add user message
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: "user",
      content: newMessage,
      timestamp: new Date(),
    };

    // Update current conversation with user message
    const updatedConversation = {
      ...currentConversation,
      messages: [...currentConversation.messages, userMessage],
    };

    // Update conversations list
    const updatedConversations = conversations.map(conv => 
      conv.id === currentConversation.id ? updatedConversation : conv
    );

    setConversations(updatedConversations);
    setCurrentConversation(updatedConversation);
    setNewMessage("");

    // Simulate AI response after a short delay
    setTimeout(() => {
      const aiMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: `This is a simulated response to your message: "${newMessage}". In a real application, this would be generated by an AI model.`,
        timestamp: new Date(),
      };

      // Update current conversation with AI message
      const finalConversation = {
        ...updatedConversation,
        messages: [...updatedConversation.messages, aiMessage],
      };

      // Update conversations list with AI message
      const finalConversations = updatedConversations.map(conv => 
        conv.id === currentConversation.id ? finalConversation : conv
      );

      setConversations(finalConversations);
      setCurrentConversation(finalConversation);
    }, 1000);
  };

  // Handle key press (Enter to send, Shift+Enter for new line)
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <Flex h="100%" w="100%">
      {/* Left sidebar - 20% width */}
      <Box
        w="20%"
        h="100%"
        bg="gray.50"
        p={4}
        borderRight="1px solid"
        borderColor="gray.200"
        display="flex"
        flexDirection="column"
      >
        {/* AI Chat Icon */}
        <Flex alignItems="center" justifyContent="center" mb={6} mt={2}>
          <FiMessageSquare size={24} />
          <Text ml={2} fontWeight="bold">AI Chat</Text>
        </Flex>
        
        {/* New Chat Button */}
        <Button 
          colorPalette="blue" 
          mb={6}
          onClick={handleNewConversation}
        >
          <Flex alignItems="center">
            <FiPlus style={{ marginRight: 8 }} />
            New Chat
          </Flex>
        </Button>
        
        {/* Experts List */}
        <Box mb={6}>
          <Text fontWeight="bold" mb={2}>Experts</Text>
          <Flex 
            p={2} 
            _hover={{ bg: "gray.100" }} 
            borderRadius="md" 
            cursor="pointer"
            onClick={handleNewConversation}
          >
            <Text>General Assistant</Text>
          </Flex>
          <Flex 
            p={2} 
            _hover={{ bg: "gray.100" }} 
            borderRadius="md" 
            cursor="pointer"
            onClick={handleNewConversation}
          >
            <Text>Technical Expert</Text>
          </Flex>
          <Flex 
            p={2} 
            _hover={{ bg: "gray.100" }} 
            borderRadius="md" 
            cursor="pointer"
            onClick={handleNewConversation}
          >
            <Text>Creative Advisor</Text>
          </Flex>
        </Box>
        
        {/* Chat History */}
        <Box flex={1} overflowY="auto">
          <Text fontWeight="bold" mb={2}>Chat History</Text>
          {conversations.map(conversation => (
            <Flex 
              key={conversation.id}
              p={2} 
              _hover={{ bg: "gray.100" }} 
              borderRadius="md" 
              cursor="pointer"
              onClick={() => handleSelectConversation(conversation)}
              bg={currentConversation?.id === conversation.id ? "blue.50" : "transparent"}
            >
              <Text truncate>{conversation.title}</Text>
            </Flex>
          ))}
        </Box>
      </Box>
      {/* Right content area - 80% width */}
      <Box w="80%" h="100%" display="flex" flexDirection="column">
        {currentConversation ? (
          <>
            {/* Chat messages area */}
            <Box 
              flex={1} 
              p={4} 
              overflowY="auto"
              bg="white"
            >
              {currentConversation.messages.map((message) => (
                <Flex 
                  key={message.id} 
                  justifyContent={message.role === "user" ? "flex-end" : "flex-start"}
                  mb={4}
                >
                  <Box 
                    maxW="80%" 
                    bg={message.role === "user" ? "blue.500" : "gray.100"}
                    color={message.role === "user" ? "white" : "black"}
                    borderRadius="lg"
                    p={3}
                  >
                    {message.role === "user" ? (
                      <Flex alignItems="center" mb={1}>
                        <FiUser size={16} style={{ marginRight: 8 }} />
                        <Text fontSize="sm" fontWeight="bold">You</Text>
                      </Flex>
                    ) : (
                      <Flex alignItems="center" mb={1}>
                        <FiMessageSquare size={16} style={{ marginRight: 8 }} />
                        <Text fontSize="sm" fontWeight="bold">Assistant</Text>
                      </Flex>
                    )}
                    <Text whiteSpace="pre-wrap">{message.content}</Text>
                  </Box>
                </Flex>
              ))}
              <div ref={messagesEndRef} />
            </Box>
            
            {/* Message input area */}
            <Box 
              p={4} 
              borderTop="1px solid" 
              borderColor="gray.200"
              bg="white"
            >
              <Flex>
                <Textarea
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder="Type your message here..."
                  minHeight="80px"
                  maxHeight="150px"
                  resize="none"
                />
                <IconButton
                  aria-label="Send message"
                  colorPalette="blue"
                  ml={2}
                  onClick={handleSendMessage}
                  disabled={!newMessage.trim()}
                >
                  <FiSend />
                </IconButton>
              </Flex>
            </Box>
          </>
        ) : (
          // Empty state when no conversation is selected
          (<Flex flex={1} alignItems="center" justifyContent="center" bg="white">
            <Box textAlign="center">
              <FiMessageSquare size={48} style={{ margin: "0 auto", color: "#CBD5E0" }} />
              <Text fontSize="xl" mt={4}>Welcome to AI Chat</Text>
              <Text color="gray.500" mt={2}>Start a new conversation or select an existing one</Text>
              <Button 
                colorPalette="blue" 
                mt={4}
                onClick={handleNewConversation}
              >
                <Flex alignItems="center">
                  <FiPlus style={{ marginRight: 8 }} />
                  Start New Chat
                </Flex>
              </Button>
            </Box>
          </Flex>)
        )}
      </Box>
    </Flex>
  )
}

export default AiChat;